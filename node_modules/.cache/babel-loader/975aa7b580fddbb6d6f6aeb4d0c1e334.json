{"ast":null,"code":"/*\nexport const mergeSort = array => {\n    if (array.length === 1) return array;\n    const middleIndex = Math.floor(array.length / 2);\n    const firstHalf = mergeSort(array.slice(0, middleIndex));\n    const secondhalf = mergeSort(array.slice(middleIndex));\n    const sortedArray = [];\n    let i = 0, j = 0;\n    while (i < firstHalf.length && j < secondhalf.length) {\n        if (firstHalf[i] < secondhalf[j]) {\n            sortedArray.push(firstHalf[i++]);\n        } else {\n            sortedArray.push(secondhalf[j++]);\n        }\n    }\n    while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n    while (j < secondhalf.length) sortedArray.push(secondhalf[j++]);\n    return sortedArray;\n}\n*/\nexport function mergeSort(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n  if (startIndex === endIndex) return;\n  const middleIndex = Math.floor((startIndex + endIndex) / 2);\n  mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\n  doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n  let k = startIndex;\n  let i = startIndex;\n  let j = middleIndex + 1;\n\n  while (i <= middleIndex && j <= endIndex) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIndex) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n  }\n\n  while (j <= endIndex) {\n    animations.push({\n      comparison: [j, j],\n      swap: [k, j]\n    });\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"names":["mergeSort","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIndex","endIndex","middleIndex","Math","floor","doMerge","k","i","j","push","comparison","swap"],"sources":["/Users/kalp/Documents/VSCode/React/sorting-vizualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"sourcesContent":["/*\nexport const mergeSort = array => {\n    if (array.length === 1) return array;\n    const middleIndex = Math.floor(array.length / 2);\n    const firstHalf = mergeSort(array.slice(0, middleIndex));\n    const secondhalf = mergeSort(array.slice(middleIndex));\n    const sortedArray = [];\n    let i = 0, j = 0;\n    while (i < firstHalf.length && j < secondhalf.length) {\n        if (firstHalf[i] < secondhalf[j]) {\n            sortedArray.push(firstHalf[i++]);\n        } else {\n            sortedArray.push(secondhalf[j++]);\n        }\n    }\n    while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n    while (j < secondhalf.length) sortedArray.push(secondhalf[j++]);\n    return sortedArray;\n}\n*/\n\nexport function mergeSort(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxiliaryArray, animations) {\n    if (startIndex === endIndex) return;\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    mergeSortHelper(auxiliaryArray, startIndex, middleIndex, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIndex + 1, endIndex, mainArray, animations);\n    doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\n    let k = startIndex;\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while (i <= middleIndex && j <= endIndex) {\n        animations.push([i, j]);\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIndex) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([k, auxiliaryArray[i]]);\n    }\n    while (j <= endIndex) {\n        animations.push({comparison: [j, j], swap: [k, j],});\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}